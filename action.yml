name: 'Go Unit Test Coverage Report'
description: 'Post Go code coverage reports to pull requests.'
author: "Friedrich Gro√üe"
branding:
  icon: 'umbrella'
  color: 'blue'

inputs:
  version:
    description: 'The exact version of the go-coverage-report tool to use.'
    required: true
    default: "v1.0.0"

  sha256sum:
    description: 'Expected SHA256 checksum of the tarball when downloading the go-coverage-report binary.'
    required: false

  coverage-artifact-name:
    description: 'The name of the artifact containing the code coverage results.'
    required: true
    default: "code-coverage"

  coverage-file-name:
    description: 'The name of the file containing the code coverage results.'
    required: true
    default: "coverage.txt"

  repo-import-path:
    description: |
      The Go import path of the tested repository to add as a prefix to all paths of the
      changed files. This is useful to map the changed files (e.g., ["foo/my_file.go"]
      to their coverage profile which uses the full package name to identify the files
      (e.g., "github.com/fgrosse/example/foo/my_file.go"). Note that currently, 
      packages with a different name than their directory are not supported.
    required: false
    default: "github.com/${{ github.repository }}"

  trim:
    description: Trim a prefix in the "Impacted Packages" column of the markdown report.
    required: false

runs:
  using: "composite"

  steps:
    - name: Download go-coverage-report
      shell: bash
      id: download
      env:
        VERSION: ${{ inputs.version }}
        SHA256SUM: ${{ inputs.sha256sum }}
      run: |
        if [ ${{ runner.arch }} = "ARM64" ]; then
          ARCH="arm64"
        elif [ ${{ runner.arch }} = "ARM" ]; then
          ARCH="arm"
        elif [ ${{ runner.arch }} = "X86" ]; then
          ARCH="386"
        elif [ ${{ runner.arch }} = "X64" ]; then
          ARCH="amd64"
        else
          ARCH="amd64"
        fi
        
        mkdir -p .github/outputs
        
        RUNNER_OS=$(echo '${{ runner.os }}' | tr '[:upper:]' '[:lower:]')
        FILENAME="go-coverage-report-${VERSION}-${RUNNER_OS}-${ARCH}.tar.gz"    
        URL="https://github.com/fgrosse/go-coverage-report/releases/download/${VERSION}/${FILENAME}"
        echo "Downloading \"$FILENAME\" from \"$URL\""
        curl --fail --location "$URL" --output .github/outputs/$FILENAME
        
        if ! [[ "$SHA256SUM" ]] ; then
          URL="https://github.com/fgrosse/go-coverage-report/releases/download/${VERSION}/checksums.txt"
          cd .github/outputs
          echo "Downloading checksums from \"$URL\""
          curl -fsSL "$URL" | sha256sum --check --ignore-missing
          cd -
        else
          echo "Expected sha256: $SHA256SUM"
          echo "Actual sha256: $(sha256sum .github/outputs/go-coverage-report.tar.gz)"
          echo "$SHA256SUM  .github/outputs/$FILENAME" | sha256sum -c  
        fi
        
        tar -xzf .github/outputs/$FILENAME -C .github/outputs/ go-coverage-report
        rm .github/outputs/$FILENAME
        sudo mv .github/outputs/go-coverage-report /usr/bin 

    - name: Determine changed files
      id: changed-files
      uses: tj-actions/changed-files@aa08304bd477b800d468db44fe10f6c61f7f7b11 # v42.1.0
      with:
        write_output_files: true
        json: true
        files: |
          **.go
        files_ignore: |
          **_test.go
          vendor/**

    - name: Code coverage report
      shell: bash
      run: $GITHUB_ACTION_PATH/github-action.sh ${{ github.repository }} ${{ github.event.pull_request.number }} ${{ github.run_id }}
      env:
        GH_REPO: ${{ github.repository }}
        GH_TOKEN: ${{ github.token }}
        GITHUB_WORKFLOW: ${{ github.workflow }}
        GITHUB_BASE_REF: ${{ github.base_ref }}
        CHANGED_FILES_PATH: .github/outputs/all_changed_files.json
        COVERAGE_ARTIFACT_NAME: ${{ inputs.coverage-artifact-name }}
        COVERAGE_FILE_NAME: ${{ inputs.coverage-file-name }}
        REPOSITORY_IMPORT_PATH: ${{ inputs.repo-import-path }}
        COVERAGE_REPORT_TRIM: ${{ inputs.trim }}
